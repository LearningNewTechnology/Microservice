#region Copyright
// Copyright Hitachi Consulting
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//    http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xigadee;

namespace Xigadee
{
    /// <summary>
    /// These extension methods simplify the logging of complex data to a consistent framework.
    /// </summary>
    public static partial class DataCollectionExtensionMethods
    {
        /// <summary>
        /// This method is used to record the success rate of a batch poll so that messages can be reconciled against the request, and polling algorithm assessed.
        /// </summary>
        /// <param name="collector">The data collector.</param>
        /// <param name="requested">The number of messages requested.</param>
        /// <param name="actual">The actual number returned.</param>
        /// <param name="channelId">The channel id for the request.</param>
        /// <returns>Returns a trace GUID for the individual boundary listener poll.</returns> 
        public static Guid BoundaryBatchPoll(this IDataCollection collector, int requested, int actual, string channelId, int channelPriority)
        {
            var id = Guid.NewGuid();
            collector.Write(
                new BoundaryEvent()
                {
                      BatchId = id
                    , Requested = requested
                    , Actual = actual
                    , ChannelId = channelId
                    , ChannelPriority = channelPriority
                    , Type = BoundaryEventType.Poll
                });
            return id;
        }

        /// <summary>
        /// This interface is used to log payload data when a message is either incoming or outgoing from the system.
        /// </summary>
        /// <param name="collector">The data collector.</param>
        /// <param name="direction">The direction of the message.</param>
        /// <param name="payload">The payload.</param>
        /// <param name="ex">Any exception generated by the attempt. If this is not null then you can assume that the incoming or outgoing action was not successful.</param>
        /// <param name="batchId">The batch id.</param>
        public static void BoundaryLog(this IDataCollection collector, ChannelDirection direction
            , TransmissionPayload payload, string channelId, int channelPriority, Exception ex = null, Guid? batchId = null)
        {
            collector.Write(
                new BoundaryEvent()
                {
                      Direction = direction
                    , ChannelId = payload?.Message?.ChannelId
                    , Id = payload?.Id
                    , Payload = payload
                    , Ex = ex
                    , BatchId = batchId
                    , Type = BoundaryEventType.Boundary
                    , ChannelPriority = channelPriority
                });
        }
    }
}
