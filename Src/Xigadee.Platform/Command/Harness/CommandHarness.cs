#region Copyright
// Copyright Hitachi Consulting
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//    http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Xigadee
{
    /// <summary>
    /// This harness is used to test command functionality manually.
    /// </summary>
    /// <typeparam name="C"></typeparam>
    public class CommandHarness<C>:ServiceHarness<C, CommandHarnessDependencies<C>>
        where C: class, ICommand
    {
        #region Constructors
        /// <summary>
        /// This is the default constructor.
        /// </summary>
        /// <param name="creator">This is the creator function to create the command. If the command supports a parameterless constructor, then you can leave this blank.</param>
        public CommandHarness(Func<C> creator = null) : base(new CommandHarnessDependencies<C>(creator))
        {
            Dispatcher = new DispatchWrapper(Dependencies.PayloadSerializer
                , CommandExecute
                ,() => Service?.Status ?? ServiceStatus.Stopped
                , true);

            //Set the harness scheduler to send the schedule execute requests here so that they can be tracked.
            Dependencies.Scheduler.TaskSubmit = ScheduleExecute;
        }
        #endregion

        #region History
        /// <summary>
        /// Gets the history of the transactions.
        /// </summary>
        public ConcurrentDictionary<Guid, CommandHarnessRequest> History { get; } = new ConcurrentDictionary<Guid, CommandHarnessRequest>();
        #endregion
        #region Failed
        /// <summary>
        /// A stack containing the last failed request.
        /// </summary>
        public ConcurrentStack<CommandHarnessRequest> Failed { get; } = new ConcurrentStack<CommandHarnessRequest>(); 
        #endregion
        #region Outgoing
        /// <summary>
        /// Contains the outgoing commands generated by the command in the order that they were generated.
        /// </summary>
        public ConcurrentQueue<TaskTracker> Outgoing { get; } = new ConcurrentQueue<TaskTracker>(); 
        #endregion

        #region RegisteredCommands
        /// <summary>
        /// Contains the set of active registered commands.
        /// </summary>
        public Dictionary<MessageFilterWrapper, bool> RegisteredCommands { get; } = new Dictionary<MessageFilterWrapper, bool>();
        #endregion
        #region RegisteredSchedules
        /// <summary>
        /// Contains the set of active registered schedules.
        /// </summary>
        public Dictionary<CommandJobSchedule, bool> RegisteredSchedules { get; } = new Dictionary<CommandJobSchedule, bool>();
        #endregion

        #region Create()
        /// <summary>
        /// This override creates the command.
        /// </summary>
        /// <returns>Returns the command.</returns>
        protected override C Create()
        {
            var command = Dependencies.Creator();

            return command;
        }
        #endregion
        #region Configure(C command)
        /// <summary>
        /// Configures the specified command and connects the ancillary services and events.
        /// </summary>
        /// <param name="command">The command.</param>
        protected override void Configure(C command)
        {
            base.Configure(command);

            command.OnCommandChange += Command_OnCommandChange;
            command.OnScheduleChange += Command_OnScheduleChange;

            command.TaskManager = OutgoingCapture;
        }
        #endregion

        #region OutgoingCapture(ICommand command, string id, TransmissionPayload payload)
        /// <summary>
        /// This method captures the outgoing requests from the command and adds them to the Outgoing queue.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <param name="id">The identifier.</param>
        /// <param name="payload">The payload.</param>
        protected virtual void OutgoingCapture(ICommand command, string id, TransmissionPayload payload)
        {
            TaskTracker tracker = TaskManager.TrackerCreateFromPayload(payload, command.GetType().Name);

            //Add delay in here.

            if (id != null)
            {
                tracker.CallbackId = id;
                tracker.Callback = command;
            }

            Outgoing.Enqueue(tracker);
        } 
        #endregion

        #region Event helpers
        private void Command_OnScheduleChange(object sender, ScheduleChangeEventArgs e)
        {
            if (e.IsRemoval)
            {
                if (RegisteredSchedules.ContainsKey(e.Schedule))
                    RegisteredSchedules.Remove(e.Schedule);
            }
            else
                RegisteredSchedules.Add(e.Schedule, e.Schedule.IsMasterJob);
        }

        private void Command_OnCommandChange(object sender, CommandChangeEventArgs e)
        {
            if (e.IsRemoval)
            {
                if (RegisteredCommands.ContainsKey(e.Key))
                    RegisteredCommands.Remove(e.Key);
            }
            else
                RegisteredCommands.Add(e.Key, e.IsMasterJob);
        }
        #endregion

        #region -> CommandExecute(TransmissionPayload payload, string reference)
        /// <summary>
        /// This method processes the command requests generated by the Dispatcher.
        /// </summary>
        /// <param name="payload">The payload.</param>
        /// <param name="reference">Something.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">payload.Id - The payload has already been processed</exception>
        protected virtual void CommandExecute(TransmissionPayload payload, string reference)
        {
            TaskTracker tracker = TaskManager.TrackerCreateFromPayload(payload, reference);

            var holder = new CommandHarnessRequest(tracker, reference);

            if (!History.TryAdd(holder.Id, holder))
                throw new ArgumentOutOfRangeException("payload.Id", $"The payload {holder.Id} has already been processed: {holder.ReferenceId}");

            try
            {
                Service.ProcessRequest(holder.Request.ToTransmissionPayload(), holder.Responses).Wait();
            }
            catch (Exception ex)
            {
                holder.Exception = ex;
                Failed.Push(holder);
            }
        } 
        #endregion
        #region -> ScheduleExecute(TaskTracker tracker)
        /// <summary>
        /// This method is used to manually process the schedule.
        /// </summary>
        /// <param name="tracker">The tracker.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">tracker - The tracker object was not of type schedule.</exception>
        protected virtual void ScheduleExecute(TaskTracker tracker)
        {
            if (tracker.Type != TaskTrackerType.Schedule)
                throw new ArgumentOutOfRangeException("tracker", "The tracker object was not of type schedule.");

            var holder = new CommandHarnessRequest(tracker, $"Schedule: {tracker.ToTransmissionPayload()}");

            if (!History.TryAdd(holder.Id, holder))
                throw new ArgumentOutOfRangeException("payload.Id", $"The sch {holder.Id} has already been processed: {holder.ReferenceId}");

            Exception failedEx = null;

            try
            {
                var token = new CancellationToken();
                tracker.Execute(token).Wait(token);

            }
            catch (Exception ex)
            {
                failedEx = ex;
                holder.Exception = ex;
            }
            finally
            {
                tracker.ExecuteComplete(tracker, failedEx != null, failedEx);
            }
        }
        #endregion

        #region Dispatcher
        /// <summary>
        /// Gets the dispatcher used to help set requests to the command.
        /// </summary>
        public IMicroserviceDispatch Dispatcher { get; }
        #endregion

        #region ScheduleExecute(string name)
        /// <summary>
        /// Triggers execution of the schedule.
        /// </summary>
        /// <param name="name">The schedule name.</param>
        /// <returns>Returns true if the schedule is resolved and submitted for executed.</returns>
        public bool ScheduleExecute(string name)
        {
            var schedule = RegisteredSchedules.Keys.FirstOrDefault((s) => s.Name == name);

            if (schedule != null)
            {
                ScheduleExecute(schedule.Id);
                return true;
            }

            return false;
        }
        #endregion
        #region ScheduleExecute(Guid id)
        /// <summary>
        /// Triggers execution of a schedule.
        /// </summary>
        /// <param name="id">The unique schedule id.</param>
        /// <returns>Returns true if the schedule is resolved and submitted for executed.</returns>
        public bool ScheduleExecute(Guid id)
        {
            return Dependencies.Scheduler.Execute(id);
        }
        #endregion
    }
}
