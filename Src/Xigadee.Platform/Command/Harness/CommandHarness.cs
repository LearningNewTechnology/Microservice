#region Copyright
// Copyright Hitachi Consulting
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//    http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Xigadee
{
    /// <summary>
    /// This harness is used to test command functionality manually.
    /// </summary>
    /// <typeparam name="C"></typeparam>
    public class CommandHarness<C>:ServiceHarness<C, CommandHarnessDependencies<C>>
        where C: class, ICommand
    {
        /// <summary>
        /// Gets the history of the transactions.
        /// </summary>
        public ConcurrentDictionary<Guid, CommandHarnessRequest> History { get; } = new ConcurrentDictionary<Guid, CommandHarnessRequest>();
        /// <summary>
        /// A stack containing the last failed request.
        /// </summary>
        public ConcurrentStack<CommandHarnessRequest> Failed { get; } = new ConcurrentStack<CommandHarnessRequest>();
        #region RegisteredCommands
        /// <summary>
        /// Contains the set of active registered commands.
        /// </summary>
        public Dictionary<MessageFilterWrapper, bool> RegisteredCommands { get; } = new Dictionary<MessageFilterWrapper, bool>();
        #endregion
        #region RegisteredSchedules
        /// <summary>
        /// Contains the set of active registered schedules.
        /// </summary>
        public Dictionary<CommandJobSchedule, bool> RegisteredSchedules { get; } = new Dictionary<CommandJobSchedule, bool>();

        #endregion

        #region Constructors
        /// <summary>
        /// This is the default constructor.
        /// </summary>
        /// <param name="creator">This is the creator function to create the command. If the command supports a parameterless constructor, then you can leave this blank.</param>
        public CommandHarness(Func<C> creator = null) : base(new CommandHarnessDependencies<C>(creator))
        {
            Dispatcher = new DispatchWrapper(Dependencies.PayloadSerializer
                , CommandExecute
                ,() => Service?.Status ?? ServiceStatus.Stopped
                , true);
        }
        #endregion

        #region Create()
        /// <summary>
        /// This override creates the command.
        /// </summary>
        /// <returns>Returns the command.</returns>
        protected override C Create()
        {
            var command = Dependencies.Creator();

            command.OnCommandChange += Command_OnCommandChange;
            command.OnScheduleChange += Command_OnScheduleChange;

            return command;
        }
        #endregion

        #region Event helpers
        private void Command_OnScheduleChange(object sender, ScheduleChangeEventArgs e)
        {
            if (e.IsRemoval)
            {
                if (RegisteredSchedules.ContainsKey(e.Schedule))
                    RegisteredSchedules.Remove(e.Schedule);
            }
            else
                RegisteredSchedules.Add(e.Schedule, e.Schedule.IsMasterJob);
        }

        private void Command_OnCommandChange(object sender, CommandChangeEventArgs e)
        {
            if (e.IsRemoval)
            {
                if (RegisteredCommands.ContainsKey(e.Key))
                    RegisteredCommands.Remove(e.Key);
            }
            else
                RegisteredCommands.Add(e.Key, e.IsMasterJob);
        }
        #endregion

        #region -> CommandExecute(TransmissionPayload payload, string reference)
        /// <summary>
        /// This method processes the command requests generated by the Dispatcher.
        /// </summary>
        /// <param name="payload">The payload.</param>
        /// <param name="reference">Something.</param>
        /// <exception cref="System.ArgumentOutOfRangeException">payload.Id - The payload has already been processed</exception>
        protected virtual void CommandExecute(TransmissionPayload payload, string reference)
        {
            var holder = new CommandHarnessRequest(payload, reference);
            if (!History.TryAdd(holder.Id, holder))
                throw new ArgumentOutOfRangeException("payload.Id", $"The payload {holder.Id} has already been processed: {holder.ReferenceId}");

            try
            {
                Service.ProcessRequest(holder.Request, holder.Responses).Wait();
            }
            catch (Exception ex)
            {
                holder.Exception = ex;
                Failed.Push(holder);
            }
        } 
        #endregion

        /// <summary>
        /// Gets the dispatcher used to pipe requests to the command.
        /// </summary>
        public IMicroserviceDispatch Dispatcher { get; }

        /// <summary>
        /// Triggers execution of the schedule.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns>Returns true if the schedule is resolved and submitted for executed.</returns>
        public bool ScheduleExecute(string name)
        {
            var schedule = RegisteredSchedules.Keys.FirstOrDefault((s) => s.Name == name);

            if (schedule != null)
            {
                Dependencies.Scheduler.Execute(schedule.Id);
                return true;
            }

            return false;
        }
    }
}
